{
  name: `Private Network`,
  description: `Secure, private network between you and a friend`,
  image: `registry.gitlab.com/minkebox/privatenetwork`,
  actions: [
    {
      type: `Header`,
      title: `Configure`
    },
    {
      type: `Text`,
      text: `A secure network requires a Server and a Client. The Server creates the network and the Client connects.`
    },
    {
      type: `Environment`,
      name: `MODE`,
      description: `Select network mode`
    },
    {
      type: `Header`,
      title: `Server`,
      visible: `property['Environment#MODE'] == 'SERVER'`
    },
    {
      type: `File`,
      description: `Generated client private network configuration file`,
      name: `/etc/config.ovpn`,
      style: `Download`
    },
    {
      type: `Header`,
      title: `Client`,
      visible: `property['Environment#MODE'] == 'CLIENT'`
    },
    {
      type: `File`,
      description: `Drop your private network configuration file here`,
      name: `/etc/config.ovpn`,
      style: `Inline`,
      enabled: 'property.FirstUse'
    }
  ],
  properties: [
    {
      type: `Feature`,
      name: `vpn`
    },
    {
      type: `Environment`,
      name: `MODE`,
      options: [
        {
          name: `Server`,
          value: `SERVER`
        },
        {
          name: `Client`,
          value: `CLIENT`
        }
      ],
      defaultValue: `CLIENT`
    },
    {
      type: `Directory`,
      name: `/etc/status`,
      style: 'boot',
    },
    {
      type: `Directory`,
      name: `/etc/openvpn`,
      style: 'boot'
    },
    {
      type: `File`,
      name: `/etc/config.ovpn`,
      style: 'boot'
    },
    {
      type: `Network`,
      name: `primary`,
      defaultValue: `home`
    },
    {
      type: `Network`,
      name: `secondary`,
      defaultValue: `__create`
    }
  ],
  monitor: {
    cmd: `ifconfig tun0 | grep "RX bytes" | tr '\\n' ' ' | sed "s/^.*RX bytes:\\([0-9]*\\).*TX bytes:\\([0-9]*\\).*$/\\1 \\2/"`,
    watch: ``,
    polling: 5,
    parser: `
      const rxtx = input.split(' ');
      if (rxtx.length == 2) {
        if (!this.state) {
          state = {
            rx: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ],
            tx: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ],
            last: rxtx
          };
        }
        state.rx.shift();
        state.tx.shift();
        state.rx.push((rxtx[0] - state.last[0]) * 8 / (1000000 * 5));
        state.tx.push((rxtx[1] - state.last[1]) * 8 / (1000000 * 5));
        output.rx = state.rx.slice(-1)[0].toFixed(1);
        output.tx = state.tx.slice(-1)[0].toFixed(1);
        state.last = rxtx;
      }
      output.graph = {
        traffic: {
          type: 'Line',
          series: [ state.rx, state.tx ],
          options: {
            width: '400px',
            axisY: {
              showLabel: true,
              showGrid: true
            }
          }
        }
      };
    `,
    header: `
      <style>
      .pn-i { display: inline-block; width: 140px; vertical-align: top; padding-top: 2px; line-height: 130%; }
      .pn-i span { display: inline-block; width: 15px; height: 15px; margin-right: 10px; background: #88cce7 }
      </style>
    `,
    template: `
      <div style="width:550px">
        <div class="pn-i">
          <div>Bandwidth</div>
          <div><span></span>Rx {{rx}} Mb/s</div>
          <div><span style="background:#278b30"></span>Tx {{tx}} Mb/s</div>
        </div>
        {{{graph.traffic}}}
      </div>
    `
  }
}