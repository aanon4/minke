{
  name: `Internet Speed Test`,
  description: `Run a latency and bandwidth test on your Internet connection every hour`,
  image: `registry.minkebox.net/minkebox/speedtest`,
  tags: [ 'Utilities' ],
  actions: [
    {
      type: `Header`,
      title: `Configure`
    },
    {
      type: `Text`,
      text: `Select the Speedtest.net server id, or leave blank to automatically pick the best. The xml list can be found here: https://www.speedtest.net/speedtest-servers-static.php`
    },
    {
      type: `Text`,
      text: `For example, Sonic.net's server id is 17846`
    },
    {
      type: `Environment`,
      description: `Server ID`,
      name: `SERVER_ID`
    },
    {
      type: `Environment`,
      description: `Autorun SpeedTest. If this is unchecked, SpeedTest will only be run when you restart`,
      style: 'Checkbox',
      name: `CRONJOB_RUN`
    },
    {
      type: `Environment`,
      description: `Comma seperated list of minutes in the hour to run the test. (e.g. 0,30 runs the test on the hour and half hour)`,
      name: `CRONJOB_ITERATION`
    },
    {
      type: `Network`,
      name: `primary`,
      description: `Select which network to test (you probably want the default)`
    },

  ],
  properties: [
    {
      type: `Port`,
      name: `443/tcp`,
      port: 443,
      protocol: 'TCP',
      nat: false,
      web: false,
      dns: false,
      mdns: null
    },
    {
      type: `Port`,
      name: `80/tcp`,
      port: 80,
      protocol: 'TCP',
      nat: false,
      web: true,
      dns: false,
      mdns: null
    },
    {
      type: `Network`,
      name: `primary`,
      defaultValue: `home`
    },
    {
      type: `Environment`,
      name: `SERVER_ID`
    },
    {
      type: `Environment`,
      name: `CRONJOB_ITERATION`,
      defaultValue: 0
    },
    {
      type: `Environment`,
      name: `CRONJOB_RUN`,
      defaultValue: true
    },
    {
      type: `Directory`,
      name: `/var/www/html/data`,
      style: 'store'
    }
  ],
  monitor: {
    cmd: `tail -1 /var/www/html/data/result.csv`,
    watch: `/var/www/html/data/result.csv`,
    polling: 0,
    parser: `
      const v = input.split(',');
      output = {
        time: new Date(parseInt(v[0])).toLocaleTimeString(),
        ping: parseFloat(v[1]),
        down: parseFloat(parseFloat(v[2]).toFixed(1)).toLocaleString(),
        up: parseFloat(parseFloat(v[3]).toFixed(1)).toLocaleString()
      };
    `,
    header: `
      <style>
        .ist-o { display: inline-block; width: 200px; padding-top: 20px; float: right; }
        .ist-b { color: grey; text-align: right; padding: 0 5px 10px 0; }
        .ist-l { display: inline-block; font-size: 24px; color: black; width: 140px; }
        .ist-g { padding-bottom: 30px }
      </style>
    `,
    template: `
      <div class='ist-o'>
        <div class='ist-b ist-g'>{{time}}</div>
        <div class='ist-b'><div class='ist-l'>{{ping}} ms</div><div>Ping</div></div>
        <div class='ist-b'><div class='ist-l'>{{down}} Mb/s</div><div>Download</div></div>
        <div class='ist-b'><div class='ist-l'>{{up}} Mb/s</div><div>Upload</div></div>
      </div>
    `
  }
}
