{
  name: `Tor Relay`,
  description: `Create a Tor middle/guard relay node`,
  image: `registry.minkebox.net/minkebox/tor-relay`,
  uuid: `1852E3FB-091D-4170-AB40-DC3F8D84F19E`,
  tags: [ 'Tor', 'Secuity', 'Networking' ],
  actions: [
    {
      type: `Help`,
      text: `A guard relay is the first relay in the chain of 3 relays building a Tor circuit. A middle relay is neither a
      guard nor an exit, but acts as the second hop between the two. To become a guard, a relay has to be stable and fast
      (at least 2MByte/s) otherwise it will remain a middle relay.<p/>
      Guard and middle relays usually do not receive abuse complaints. All relays will be listed in the public list
      of Tor relays, so may be blocked by certain services that don't understand how Tor works or deliberately want to
      censor Tor users. If you are running a relay from home and have one static IP, you may want to consider running a
      bridge instead so that your non-Tor traffic doesn't get blocked as though it's coming from Tor. If you have a
      dynamic IP address or multiple static IPs, this isn't as much of an issue.<p/>
      A non-exit Tor relay requires minimal maintenance efforts and bandwidth usage can be highly customized in
      the tor configuration. The so called "exit policy" of the relay decides if it is a relay allowing clients to exit
      or not. A non-exit relay does not allow exiting in its exit policy.`
    },
    {
      type: `Header`,
      title: `Configuration`
    },
    {
      type: `EditEnvironment`,
      name: `EMAIL`,
      description: `Public email associated with this node`
    },
    {
      type: `EditEnvironment`,
      name: `BANDWIDTH`,
      description: `Available bandwidth (in MBits)`
    },
    {
      type: `EditEnvironment`,
      name: `ORPort`,
      description: `Select the port number for incoming connections`,
      initValue: `{{__RANDOMPORTS(1)}}`
    }
  ],
  properties: [
    {
      type: `Feature`,
      name: `ddns`
    },
    {
      type: `Directory`,
      name: `/var/lib/tor`,
      style: `store`
    },
    {
      type: `File`,
      name: `/etc/tor/torrc`,
      value: `{{torrc}}`,
      style: `boot`
    },
    {
      type: `Port`,
      name: `ORPort`,
      protocol: `TCP`,
      port: `ORPort`,
      nat: true
    },
    {
      type: `Network`,
      name: `primary`,
      value: `home`
    }
  ],
  monitor: {
    cmd: `echo $(ifconfig eth0 | grep "RX bytes" | tr '\\n' ' ' | sed "s/^.*RX bytes:\\([0-9]*\\).*TX bytes:\\([0-9]*\\).*$/\\1 \\2/")`,
    init: `
      <div style="min-width: 400px; height: 250px">
        <canvas style="position: absolute" id="{{ID}}"></canvas>
      </div>
      <script>
        (function(){
          const chart = new Chart(document.getElementById("{{ID}}").getContext("2d"), {
            type: 'line',
            data: {
              labels: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],
              datasets: [
                { data: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ], label: 'RX', borderColor: '#88cce7', backgroundColor: '#88cce7', fill: false, pointRadius: 0, clip: { top: 0, right: -10, bottom: 0, left: -10 } },
                { data: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ], label: 'TX', borderColor: '#41b376', backgroundColor: '#41b376', fill: false, pointRadius: 0, clip: { top: 0, right: -10, bottom: 0, left: -10 } }
              ]
            },
            options: {
              animation: { duration: 1000, easing: 'linear' },
              maintainAspectRatio: false,
              adaptive: true,
              title: { display: true, text: 'Bandwidth (Mbps)' },
              scales: {
                xAxes: [{
                  display: false
                }],
                yAxes: [{
                  ticks: { beginAtZero: true }
                }]
              }
            }
          });
          const state = {
            last: [ 0, 0 ],
            then: 0
          };
          window.monitor("{{ID}}", 1, (input) => {
            const rxtx = input.split(' ');
            if (rxtx.length == 2) {
              const now = Date.now() / 1000;
              rxtx[0] = parseInt(rxtx[0]);
              rxtx[1] = parseInt(rxtx[1]);
              let elapse = Math.min(chart.data.datasets[0].data.length, Math.floor(now - state.then));
              if (elapse > 5) {
                if (elapse >= chart.data.datasets[0].data.length) {
                  state.last = rxtx;
                }
                for (; elapse > 0; elapse--) {
                  chart.data.datasets[0].data.shift();
                  chart.data.datasets[1].data.shift();
                  chart.data.datasets[0].data.push(0);
                  chart.data.datasets[1].data.push(0);
                }
              }
              chart.data.datasets[0].data.shift();
              chart.data.datasets[1].data.shift();
              chart.data.datasets[0].data.push((rxtx[0] - state.last[0]) * 8 / 1000000 / (now - state.then));
              chart.data.datasets[1].data.push((rxtx[1] - state.last[1]) * 8 / 1000000 / (now - state.then));
              state.last = rxtx;
              state.then = now;
              chart.update();
            }
          });
        })();
      </script>
    `
  },
  constants: [
    {
      name: `torrc`,
      value: `
ContactInfo {{EMAIL}}
ORPort {{ORPort}}
Address {{__GLOBALNAME}}
Nickname MinkeBoxTor
ExitRelay 0
SocksPort 0
ControlSocket 0
BandwidthRate {{BANDWIDTH}}MBits
BandwidthBurst {{BANDWIDTH}}MBits
RelayBandwidthRate {{BANDWIDTH}}MBits
RelayBandwidthBurst {{BANDWIDTH}}MBits
`
    }
  ]
}
