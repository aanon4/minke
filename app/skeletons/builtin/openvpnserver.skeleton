{
  name: `Simple VPN`,
  description: `Super simple VPN to connect to your home network`,
  image: `registry.gitlab.com/minkebox/openvpnserver`,
  actions: [
    {
      type: `Header`,
      title: `Network`,
      visible: `property['AdminMode'] == true`
    },
    {
      type: 'Text',
      text: 'Select which network this application will use. You probably want <b>home</b> unless this application is being used on a private network.'
    },
    {
      type: 'Network',
      name: 'primary',
      description: 'Select network'
    },
    {
      type: `Header`,
      title: `Client Configuration`
    },
    {
      type: `Text`,
      text: `The VPN will generate a client configuration file which anyone can use to connect to your network. It can be used by any number of people or machines, and requires no password. Guard it well!.`
    },
    {
      type: `Text`,
      text: `This can take a while to generate and the download button will be blue once it is available.`
    },
    {
      type: `File`,
      description: `Download the configuration file`,
      name: `/etc/config.ovpn`,
      style: `Download`
    }
  ],
  properties: [
    {
      type: `Feature`,
      name: `vpn`,
      defaultValue: true
    },
    {
      type: `Directory`,
      name: `/etc/openvpn`,
      style: 'boot'
    },
    {
      type: `File`,
      name: `/etc/config.ovpn`,
      style: 'boot'
    },
    {
      type: `Network`,
      name: `primary`,
      defaultValue: `home`
    },
    {
      type: `Network`,
      name: `secondary`,
      defaultValue: `home`
    }
  ],
  monitor: {
    cmd: `ifconfig tap0 | grep "RX bytes" | tr '\\n' ' ' | sed "s/^.*RX bytes:\\([0-9]*\\).*TX bytes:\\([0-9]*\\).*$/\\1 \\2/"`,
    watch: ``,
    polling: 5,
    parser: `
      const rxtx = input.split(' ');
      if (rxtx.length == 2) {
        if (!this.state) {
          state = {
            rx: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ],
            tx: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ],
            last: rxtx
          };
        }
        state.rx.shift();
        state.tx.shift();
        state.rx.push((rxtx[0] - state.last[0]) * 8 / (1000000 * 5));
        state.tx.push((rxtx[1] - state.last[1]) * 8 / (1000000 * 5));
        output.rx = state.rx.slice(-1)[0].toFixed(1);
        output.tx = state.tx.slice(-1)[0].toFixed(1);
        state.last = rxtx;
      }
      output.graph = {
        traffic: {
          type: 'Line',
          series: [ state.rx, state.tx ],
          options: {
            width: '400px',
            axisY: {
              showLabel: true,
              showGrid: true
            }
          }
        }
      };
    `,
    header: `
      <style>
      .sns-i { display: inline-block; width: 140px; vertical-align: top; padding-top: 2px; line-height: 130%; }
      .sns-i span { display: inline-block; width: 15px; height: 15px; margin-right: 10px; background: #88cce7 }
      </style>
    `,
    template: `
      <div style="width:550px">
        <div class="sns-i">
          <div>Bandwidth</div>
          <div><span></span>Rx {{rx}} Mb/s</div>
          <div><span style="background:#278b30"></span>Tx {{tx}} Mb/s</div>
        </div>
        {{{graph.traffic}}}
      </div>
    `
  }
}
