{
  name: `Simple VPN`,
  description: `Super simple VPN to connect to your home network`,
  image: `registry.gitlab.com/minkebox/openvpnserver`,
  tags: [ 'VPN' ],
  actions: [
    {
      type: `Header`,
      title: `Network`,
      visible: `property['AdminMode'] == true`
    },
    {
      type: `Text`,
      text: `Select which network this application will use. You probably want <b>home</b> unless this application is being used on a private network.`
    },
    {
      type: `Network`,
      name: `primary`,
      description: `Select network`
    },
    {
      type: `Header`,
      title: `Client Configuration`
    },
    {
      type: `Text`,
      text: `The VPN will generate a client configuration file which anyone can use to connect to your network. It can be used by any number of people or machines, and requires no password. Guard it well!.`
    },
    {
      type: `Text`,
      text: `This can take a while to generate and the download button will be blue once it is available.`
    },
    {
      type: `File`,
      description: `Download the configuration file`,
      name: `/etc/config.ovpn`,
      style: `Download`
    }
  ],
  properties: [
    {
      type: `Feature`,
      name: `vpn`,
      defaultValue: true
    },
    {
      type: `Directory`,
      name: `/etc/openvpn`,
      style: `boot`
    },
    {
      type: `File`,
      name: `/etc/config.ovpn`,
      style: `boot`
    },
    {
      type: `Network`,
      name: `primary`,
      defaultValue: `home`
    },
    {
      type: `Network`,
      name: `secondary`,
      defaultValue: `home`
    }
  ],
  monitor: {
    cmd: `ifconfig tap0 | grep "RX bytes" | tr '\\n' ' ' | sed "s/^.*RX bytes:\\([0-9]*\\).*TX bytes:\\([0-9]*\\).*$/\\1 \\2/"`,
    watch: ``,
    polling: 5,
    parser: `
      const rxtx = input.split(' ');
      if (rxtx.length == 2) {
        if (!this.state) {
          state = {
            rx: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ],
            tx: [ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ],
            last: rxtx
          };
        }
        state.rx.shift();
        state.tx.shift();
        state.rx.push((rxtx[0] - state.last[0]) * 8 / (1000000 * 5));
        state.tx.push((rxtx[1] - state.last[1]) * 8 / (1000000 * 5));
        output.rx = state.rx.slice(-1)[0].toFixed(1);
        output.tx = state.tx.slice(-1)[0].toFixed(1);
        state.last = rxtx;
      }
      output.graph = {
        traffic: {
          type: 'line',
          data: {
            labels: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],
            datasets: [
              { label: 'RX', data: state.rx, borderColor: '#88cce7', backgroundColor: '#88cce7', fill: false, pointRadius: 0 },
              { label: 'TX', data: state.tx, borderColor: '#41b376', backgroundColor: '#41b376', fill: false, pointRadius: 0 }
            ]
          },
          options: {
            animation: { duration: 0 },
            maintainAspectRatio: false,
            adaptive: true,
            title: { display: true, text: 'Bandwidth (Mb/s)' },
            scales: {
              xAxes: [{
                display: false
              }],
              yAxes: [{
                ticks: { beginAtZero: true }
              }]
            }
          } 
        }
      };
    `,
    minwidth: '400px',
    template: `{{{graph.traffic}}}`
  }
}